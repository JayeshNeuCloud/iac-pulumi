
  //  Create an EC2 instance
  // const appInstance = new aws.ec2.Instance("appInstance", {
  //   instanceType: "t2.micro",
  //   ami: customAmiId,
  //   vpcSecurityGroupIds: [appSecurityGroup.id],
  //   subnetId: publicSubnets[0].id, // Use the first public subnet
  //   availabilityZone: availabilityZones.names[0],
  //   iamInstanceProfile: ec2InstanceProfile.id,
  //   //associatePublicIpAddress: true,  // Check this
  //   rootBlockDevice: {
  //     volumeSize: 25,
  //     volumeType: "gp2",
  //     deleteOnTermination: true,
  //   },
  //   keyName: keyPair.keyName,
  //   tags: userTags("myEc2Instance"),
  //   userData: pulumi.interpolate`#!/bin/bash
  //   sudo rm -rf /opt/csye6225/webapp/.env
  //   sudo echo "MYSQL_HOST=${rdsInstance.address}" | sudo tee -a /opt/csye6225/webapp/.env
  //   sudo echo "MYSQL_USER='${rdsInstance.username}'" | sudo tee -a /opt/csye6225/webapp/.env
  //   sudo echo "MYSQL_PASSWORD='${rdsInstance.password}'" | sudo tee -a /opt/csye6225/webapp/.env
  //   sudo echo "MYSQL_DATABASE='${rdsInstance.dbName}'" | sudo tee -a /opt/csye6225/webapp/.env
  //   sudo echo "MYSQL_DIALECT='${dialect}'" | sudo tee -a /opt/csye6225/webapp/.env  
  //   sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
  //       -a fetch-config \
  //       -m ec2 \
  //       -c file:/opt/aws/amazon-cloudwatch-agent/etc/cloudwatch-config.json \
  //       -s
  //       sudo systemctl daemon-reload
  //       sudo systemctl enable webapp
  //       sudo systemctl start webapp
  //       sudo systemctl enable amazon-cloudwatch-agent
  //       sudo systemctl start amazon-cloudwatch-agent`,
  // }, {
  //   dependsOn: [
  //     vpc,
  //     ...privateSubnets,  // Assuming privateSubnet is an array
  //     ...publicSubnets    // Assuming publicSubnet is an array
  //   ],
  // });






// Create an EC2 instance
//  const appInstance = new aws.ec2.Instance("appInstance", {
//   instanceType: "t2.micro",
//   ami: customAmiId,
//   vpcSecurityGroupIds: [appSecurityGroup.id],
//   subnetId: publicSubnets[0].id, // Use the first public subnet
//   availabilityZone: availabilityZones.names[0],
//   iamInstanceProfile: ec2InstanceProfile.id,
//   //associatePublicIpAddress: true,  // Check this
//   rootBlockDevice: {
//     volumeSize: 25,
//     volumeType: "gp2",
//     deleteOnTermination: true,
//   },
//   keyName: keyPair.keyName,
//   tags: userTags("myEc2Instance"),
//   userData: pulumi.interpolate`#!/bin/bash
//   sudo rm -rf /opt/csye6225/webapp/.env
//   sudo echo "MYSQL_HOST=${rdsInstance.address}" | sudo tee -a /opt/csye6225/webapp/.env
//   sudo echo "MYSQL_USER='${rdsInstance.username}'" | sudo tee -a /opt/csye6225/webapp/.env
//   sudo echo "MYSQL_PASSWORD='${rdsInstance.password}'" | sudo tee -a /opt/csye6225/webapp/.env
//   sudo echo "MYSQL_DATABASE='${rdsInstance.dbName}'" | sudo tee -a /opt/csye6225/webapp/.env
//   sudo echo "MYSQL_DIALECT='${dialect}'" | sudo tee -a /opt/csye6225/webapp/.env
//   sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
//       -a fetch-config \
//       -m ec2 \
//       -c file:/opt/aws/amazon-cloudwatch-agent/etc/cloudwatch-config.json \
//       -s
//       sudo systemctl daemon-reload
//       sudo systemctl enable webapp
//       sudo systemctl start webapp
//       sudo systemctl enable amazon-cloudwatch-agent
//       sudo systemctl start amazon-cloudwatch-agent`,
// }, {
//   dependsOn: [
//     vpc,
//     ...privateSubnets,  // Assuming privateSubnet is an array
//     ...publicSubnets    // Assuming publicSubnet is an array
//   ],
// });




// const eip = new aws.ec2.Eip("myEip", {
//   instance: appInstance.id,
//   //vpc: true, // make sure the EIP is in the VPC
// });


// const eipAssociation = new aws.ec2.EipAssociation("myEipAssociation", {
//   instanceId: appInstance.id,
//   publicIp: eip.publicIp,
//   // allocationId: eip.allocationId,
// }, { dependsOn: [appInstance] }); // Making sure the association happens after the instance is created


// const aRecord = new aws.route53.Record(`${domainName}-A`, {
//   zoneId: hostedZoneId,
//   name: domainName,
//   type: "A",
//   ttl: 300,
//   records: [eip.publicIp],
// }, { dependsOn: [eipAssociation] }); // Ensure the record is created after the EIP is associated
